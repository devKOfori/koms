# Generated by Django 5.1.2 on 2025-01-05 13:49

import api.models
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Amenity',
                'verbose_name_plural': 'Amenities',
                'db_table': 'amenities',
            },
        ),
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('national_id', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'client',
            },
        ),
        migrations.CreateModel(
            name='ComplaintStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Complaint Status',
                'verbose_name_plural': 'Complaint Statuses',
                'db_table': 'complaintstatus',
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'department',
            },
        ),
        migrations.CreateModel(
            name='Gender',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=10)),
            ],
            options={
                'db_table': 'gender',
            },
        ),
        migrations.CreateModel(
            name='Hashtag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Hashtag',
                'verbose_name_plural': 'Hashtags',
                'db_table': 'hashtag',
            },
        ),
        migrations.CreateModel(
            name='HouseKeepingState',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'House-Keeping State',
                'verbose_name_plural': 'House-Keeping States',
                'db_table': 'housekeepingstate',
            },
        ),
        migrations.CreateModel(
            name='NameTitle',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Title',
                'verbose_name_plural': 'Titles',
                'db_table': 'nametitle',
            },
        ),
        migrations.CreateModel(
            name='PaymentMethod',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Payment Method',
                'verbose_name_plural': 'Payment Methods',
                'db_table': 'paymentmethod',
            },
        ),
        migrations.CreateModel(
            name='PaymentType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Payment Type',
                'verbose_name_plural': 'Payment Types',
                'db_table': 'paymenttype',
            },
        ),
        migrations.CreateModel(
            name='Priority',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name': 'Priority',
                'verbose_name_plural': 'Priorities',
                'db_table': 'priority',
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=255)),
            ],
            options={
                'db_table': 'role',
            },
        ),
        migrations.CreateModel(
            name='RoomStatus',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'roomstatus',
            },
        ),
        migrations.CreateModel(
            name='Sponsor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('phone_number', models.CharField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('fax', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'db_table': 'sponsor',
            },
        ),
        migrations.CreateModel(
            name='SponsorType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('allow_credit', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Sponsor Type',
                'verbose_name_plural': 'Sponsor Types',
                'db_table': 'sponsortype',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('is_staff', models.BooleanField(default=False)),
                ('is_superuser', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'user',
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('employee_id', models.CharField(blank=True, max_length=255, null=True)),
                ('group_id', models.CharField(blank=True, max_length=255, null=True)),
                ('national_id', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_contact_name', models.CharField(blank=True, max_length=255, null=True)),
                ('emergency_contact_phone', models.CharField(blank=True, max_length=255, null=True)),
                ('room_number', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('booking_code', models.CharField(blank=True, max_length=255, null=True)),
                ('check_in', models.DateTimeField(default=django.utils.timezone.now)),
                ('check_out', models.DateTimeField(default=django.utils.timezone.now)),
                ('number_of_guests', models.PositiveIntegerField(default=1)),
                ('number_of_older_guests', models.PositiveIntegerField(default=1)),
                ('number_of_younger_guests', models.PositiveIntegerField(default=0)),
                ('rate_type', models.CharField(choices=[('member', 'Member'), ('non-member', 'Non-Member')], default='non-member', max_length=255)),
                ('rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=11)),
                ('promo_code', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('date_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('checked_out', models.BooleanField(default=False)),
                ('client', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.client')),
                ('gender', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.gender')),
                ('title', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.nametitle')),
                ('payment_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.paymenttype')),
            ],
            options={
                'db_table': 'booking',
            },
        ),
        migrations.CreateModel(
            name='Complaint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('client', models.CharField(max_length=255)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField()),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(blank=True, null=True)),
                ('complaint_items', models.ManyToManyField(to='api.amenity')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.complaintstatus')),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.department')),
                ('hashtags', models.ManyToManyField(to='api.hashtag')),
                ('priority', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.priority')),
            ],
            options={
                'verbose_name': 'Complaint',
                'verbose_name_plural': 'Complaints',
                'db_table': 'complaint',
            },
        ),
        migrations.AddField(
            model_name='client',
            name='gender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.gender'),
        ),
        migrations.AddField(
            model_name='client',
            name='title',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.nametitle'),
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255)),
                ('token', models.CharField(db_index=True, max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_used', models.BooleanField(default=False)),
                ('reset_channel', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS')], max_length=30)),
                ('expiry_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Password Reset',
                'verbose_name_plural': 'Password Resets',
                'db_table': 'passwordreset',
            },
        ),
        migrations.CreateModel(
            name='AssignComplaint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('client', models.CharField(max_length=255)),
                ('room_number', models.CharField(max_length=255)),
                ('title', models.CharField(blank=True, max_length=255, null=True)),
                ('message', models.TextField()),
                ('date_assigned', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(blank=True, null=True)),
                ('complaint_items', models.ManyToManyField(to='api.amenity')),
                ('complaint', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assigned_complaints', to='api.complaint')),
                ('complaint_status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.complaintstatus')),
                ('assigned_to_department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.department')),
                ('hashtags', models.ManyToManyField(to='api.hashtag')),
                ('priority', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.priority')),
            ],
            options={
                'verbose_name': 'Assign Complaint',
                'verbose_name_plural': 'Assign Complaints',
                'db_table': 'assigncomplaint',
                'ordering': ['-created_on'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=255)),
                ('birthdate', models.DateField(null=True)),
                ('photo', models.ImageField(null=True, upload_to=api.models.profile_photo_upload_path)),
                ('phone_number', models.CharField(blank=True, max_length=30, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('residential_address', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles_created', to='api.profile')),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles', to='api.department')),
                ('gender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.gender')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'profile',
            },
        ),
        migrations.CreateModel(
            name='ProcessComplaint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('process_complaint_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('note', models.TextField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('assigned_complaint', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.assigncomplaint')),
                ('complaint', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_complaints', to='api.complaint')),
                ('complaint_status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_complaints', to='api.complaintstatus')),
                ('processed_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_complaints', to='api.profile')),
            ],
            options={
                'verbose_name': 'Process Complaint',
                'verbose_name_plural': 'Process Complaints',
                'db_table': 'processcomplaint',
            },
        ),
        migrations.CreateModel(
            name='HouseKeepingStateTrans',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('note', models.CharField(blank=True, max_length=255, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('final_trans_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='final_trans', to='api.housekeepingstate')),
                ('initial_trans_state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='initial_trans', to='api.housekeepingstate')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
            ],
            options={
                'verbose_name': 'House-Keeping State Transfer',
                'verbose_name_plural': 'House-Keeping State Transfers',
                'db_table': 'housekeepingstatetrans',
            },
        ),
        migrations.CreateModel(
            name='HotelView',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
            ],
            options={
                'verbose_name': 'Hotel View',
                'verbose_name_plural': 'Hotel Views',
                'db_table': 'hotelview',
            },
        ),
        migrations.CreateModel(
            name='HotelFloor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
            ],
            options={
                'db_table': 'hotelfloor',
            },
        ),
        migrations.AddField(
            model_name='complaint',
            name='updated_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_complaints', to='api.profile'),
        ),
        migrations.CreateModel(
            name='Checkout',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('room_number', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(max_length=255)),
                ('last_name', models.CharField(max_length=255)),
                ('date_checked_in', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_checked_out', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='checkout', to='api.booking')),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.client')),
                ('gender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.gender')),
                ('checked_in_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checkins', to='api.profile')),
                ('checked_out_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='checkouts', to='api.profile')),
            ],
            options={
                'verbose_name': 'Checkout',
                'verbose_name_plural': 'Checkouts',
                'db_table': 'checkout',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='created_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings_created', to='api.profile'),
        ),
        migrations.AddField(
            model_name='booking',
            name='modified_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bookings_modified', to='api.profile'),
        ),
        migrations.CreateModel(
            name='BedType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
            ],
            options={
                'verbose_name': 'Bed Type',
                'verbose_name_plural': 'Beds Types',
                'db_table': 'bedtype',
            },
        ),
        migrations.AddField(
            model_name='assigncomplaint',
            name='assigned_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_complaints', to='api.profile'),
        ),
        migrations.AddField(
            model_name='assigncomplaint',
            name='assigned_to',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='complaints_assigned', to='api.profile'),
        ),
        migrations.AddField(
            model_name='amenity',
            name='created_by',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile'),
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('issued_to', models.CharField(max_length=255)),
                ('receipt_number', models.CharField(db_index=True, max_length=255)),
                ('amount_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=11)),
                ('amount_available', models.DecimalField(decimal_places=2, default=0.0, max_digits=11)),
                ('date_issued', models.DateTimeField(auto_now_add=True)),
                ('transaction_id', models.CharField(blank=True, max_length=255, null=True)),
                ('note', models.CharField(blank=True, max_length=255, null=True)),
                ('receipt_status', models.CharField(choices=[('activated', 'Activated'), ('deactivated', 'Deactivated')], max_length=255)),
                ('gender', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.gender')),
                ('issued_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
                ('payment_method', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.paymentmethod')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='receipt',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.receipt'),
        ),
        migrations.CreateModel(
            name='ProfileRole',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='api.profile')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='profiles', to='api.role')),
            ],
            options={
                'verbose_name': 'Profile Role',
                'verbose_name_plural': 'Profile Roles',
                'db_table': 'profilerole',
            },
        ),
        migrations.AddField(
            model_name='profile',
            name='profile_roles',
            field=models.ManyToManyField(through='api.ProfileRole', to='api.role'),
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('room_number', models.CharField(db_index=True, max_length=255)),
                ('rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=6)),
                ('max_guests', models.PositiveIntegerField(default=1, null=True)),
                ('is_occupied', models.BooleanField(default=False)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('room_maintenance_status', models.CharField(choices=[('default', 'Default'), ('cleaned', 'Cleaned'), ('used', 'Used'), ('broken', 'Broken')], default='default', max_length=255)),
                ('room_booking_status', models.CharField(choices=[('default', 'default'), ('booked', 'booked'), ('empty', 'empty'), ('unavailable', 'unavailable')], default='default', max_length=255)),
                ('amenities', models.ManyToManyField(related_name='rooms', to='api.amenity')),
                ('bed_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rooms', to='api.bedtype')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
                ('floor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.hotelfloor')),
            ],
            options={
                'db_table': 'room',
            },
        ),
        migrations.AddField(
            model_name='complaint',
            name='room_number',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.room'),
        ),
        migrations.AddField(
            model_name='booking',
            name='room',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.room'),
        ),
        migrations.CreateModel(
            name='RoomCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('amenities', models.ManyToManyField(to='api.amenity')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
            ],
            options={
                'verbose_name': 'Room Category',
                'verbose_name_plural': 'Room Categories',
                'db_table': 'roomcategory',
            },
        ),
        migrations.AddField(
            model_name='room',
            name='room_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.roomcategory'),
        ),
        migrations.AddField(
            model_name='booking',
            name='room_category',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.roomcategory'),
        ),
        migrations.CreateModel(
            name='RoomType',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('area_in_meters', models.DecimalField(decimal_places=1, default=0.0, max_digits=4)),
                ('area_in_feet', models.DecimalField(decimal_places=1, default=0.0, max_digits=4)),
                ('max_guests', models.IntegerField(default=1)),
                ('rate', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('amenities', models.ManyToManyField(to='api.amenity')),
                ('bed_types', models.ManyToManyField(to='api.bedtype')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
                ('room_category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='room_types', to='api.roomcategory')),
                ('view', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.hotelview')),
            ],
            options={
                'verbose_name': 'Room Type',
                'verbose_name_plural': 'Room Types',
                'db_table': 'roomtype',
            },
        ),
        migrations.AddField(
            model_name='room',
            name='room_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rooms', to='api.roomtype'),
        ),
        migrations.AddField(
            model_name='booking',
            name='room_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.roomtype'),
        ),
        migrations.CreateModel(
            name='Shift',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('start_time', models.TimeField(default=django.utils.timezone.now)),
                ('end_time', models.TimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
            ],
            options={
                'db_table': 'workshift',
            },
        ),
        migrations.CreateModel(
            name='RoomKeepingAssign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('assignment_date', models.DateField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('assigned_to', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='room_keeping_duties', to='api.profile')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_roomkeeping_assignments', to='api.profile')),
                ('last_modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_roomkeeping_assignments', to='api.profile')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='maintenance_assignments', to='api.room')),
                ('shift', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.shift')),
            ],
            options={
                'verbose_name': 'Room Keeping Assignment',
                'verbose_name_plural': 'Room Keeping Assignments',
                'db_table': 'roomkeepingassign',
            },
        ),
        migrations.CreateModel(
            name='ProfileShiftAssign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('date', models.DateField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_shifts', to='api.profile')),
                ('department', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.department')),
                ('last_modified_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='modified_shifts', to='api.profile')),
                ('profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='shifts', to='api.profile')),
                ('shift', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.shift')),
            ],
            options={
                'verbose_name': 'Shift Assignment',
                'verbose_name_plural': 'Shift Assignments',
                'db_table': 'profileshiftassign',
            },
        ),
        migrations.CreateModel(
            name='ProcessRoomKeeping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('date_processed', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('note', models.CharField(blank=True, max_length=255, null=True)),
                ('room_state_trans', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.housekeepingstatetrans')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.profile')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.room')),
                ('room_keeping_assign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.roomkeepingassign')),
                ('shift', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.shift')),
            ],
            options={
                'verbose_name': 'Room Keeping',
                'verbose_name_plural': 'Room Keepings',
                'db_table': 'processroomkeeping',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='sponsor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.sponsor'),
        ),
        migrations.AddField(
            model_name='sponsor',
            name='sponsor_type',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.sponsortype'),
        ),
        migrations.AddField(
            model_name='booking',
            name='sponsor_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.sponsortype'),
        ),
    ]
